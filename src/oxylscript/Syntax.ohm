OxylScript {
	Program = SourceElement*
	SourceElement = Statement #semicolon

	space := whitespace | lineTerminator | comment
	whitespace = "\t"
				| "\x0B" -- verticalTab
				| "\x0C" -- formFeed
				| " "
				| "\u00A0" -- noBreakSpace
				| "\uFEFF"  -- byteOrderMark
				| "\u2000".."\u200B"
				| "\u3000"

	lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
	lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

	multiLineCommentSingleLine = "/*" (~("*/" | lineTerminator) any)* "*/"

	spacesNoNewline = (whitespace | singleLineComment | multiLineCommentSingleLine)*
	semicolon = space* (";" | end)
				| spacesNoNewline (lineTerminator | ~multiLineCommentSingleLine multiLineComment | &"}")

	comment = multiLineComment | singleLineComment
	multiLineComment = "/*" (~"*/" any)* "*/"
  	singleLineComment = "//" (~lineTerminator any)*

	noun<text> = ("the" space)? text
	Noun<text> = #noun<text>

	a<text> = (("an" | "a") space)? text
	A<text> = #a<text>

	ArityToOne<stuff> = stuff // convert the arity of something to one

	Statement = BlockStatement
				| EmptyStatement
				| VariableStatement
				| IfStatement
				| LoopStatement
				| AddRoleStatement
				| RemoveRoleStatement
				| BanStatement
				| KickStatement
				| CreateMessageStatement
				| SendDMStatement
				| SetNicknameStatement
				| ExpressionStatement

	BlockStatement = ~variableLiteral "{" Statement* "}"

	EmptyStatement = ";"

	VariableStatement = variableName "=" Expression -- setWithEqual
						| "set" Noun<"variable">? variableName "to" Expression -- setNoEqual

	IfStatement = "if" Expression Statement ("else" Statement)?

	LoopStatement = "loop" Expression "times" Statement

	AddRoleStatement = "add" Expression "to" Expression ArityToOne<("because" | "due to" | "with"? "reason")> Expression -- reason
					| "add" Expression "to" Expression -- noReason

	RemoveRoleStatement = "remove" Expression "from" Expression ArityToOne<("because" | "due to" | "with"? "reason")> Expression -- reason
						| "remove" Expression "from" Expression -- noReason

	BanStatement = "ban" Expression ArityToOne<("because" | "due to" | "with"? "reason")> Expression -- reason
				| "ban" Expression -- noReason

	KickStatement = "kick" Expression ArityToOne<("because" | "due to" | "with"? "reason")> Expression -- reason
					| "kick" Expression -- noReason

	CreateMessageStatement = ("create" | "send") (A<"message"> ("with content" | "saying")?)? Expression "in" Expression

	SendDMStatement = ("create" | "send") (A<("dm" | "direct message")> ("with content" | "saying")?)? Expression "to" Expression

	SetNicknameStatement = "set" Noun<"nickname"> "of" Expression "to" Expression

	ExpressionStatement = Expression

	Expression = AbsoluteValueExpression
				| CleanContentExpression
				| CreationTimestampExpression
				| DifferenceExpression
				| FormatDateExpression
				| IDExpression
				| IndexOfExpression
				| MemberCountExpression
				| MemberGameExpression
				| MemberJoinTimestampExpression
				| MemberStatusExpression
				| MentionExpression
				| MessageAuthorExpression
				| MessageContentExpression
				| NameExpression
				| UsernameExpression
				| RandomNumberExpression
				| RoundExpression
				| GuildIconExpression
				| GuildRegionExpression
				| GuildOwnerExpression
				| SubstringExpression
				| LengthExpression
				| LowercaseExpression
				| UppercaseExpression
				| UserAvatarExpression
				| UserDiscriminatorExpression
				| UserTagExpression
				| UserFromIDExpression
				| MemberFromUserExpression
				| MemberFromIDExpression
				| ChannelFromIDExpression
				| RoleFromIDExpression
				| RoleFromNameExpression
				| ContainsExpression
				| DoesntContainExpression
				| HasPermissionExpression
				| HasChannelPermissionExpression
				| HasRoleExpression
				| IsBotExpression
				| IsHoistedExpression
				| ChannelFromMessageExpression
				| GuildFromRoleExpression
				| GuildFromMessageExpression
				| GuildFromChannelExpression
				| OrExpression

	AbsoluteValueExpression = (Noun<("absolute")> | Noun<"abs">) "value of" Expression -- words
							| "|" Expression "|" -- pipes

	CleanContentExpression = Noun<"clean"> "content of" Expression -- exprLast
							| Expression "'s clean content" -- exprFirst

	CreationTimestampExpression = Noun<"creation"> "timestamp of" Expression -- exprLast
								| Expression "'s creation timestamp" -- exprFirst

	DifferenceExpression = Noun<"difference"> "between" Expression "and" Expression

	FormatDateExpression = Expression ArityToOne<("formatted as a date" | "to date" "format"?)>

	IDExpression = Noun<"id"> "of" Expression -- exprLast
				| Expression "'s id" -- exprFirst

	IndexOfExpression = Noun<"index"> "of" Expression "in" Expression

	MemberCountExpression = Noun<"member"> "count of" Expression -- exprLast
							| Expression "'s member count" -- exprFirst

	MemberGameExpression = Noun<"game"> "of" Expression -- exprLast
							| Expression "'s game" -- exprFirst

	MemberJoinTimestampExpression = Noun<"join"> "timestamp of" Expression -- exprLast
							| Expression "'s join timestamp" -- exprFirst

	MemberStatusExpression = Noun<"status"> "of" Expression -- exprLast
							| Expression "'s status" -- exprFirst

	MentionExpression = Noun<"mention"> "of" Expression -- exprLast
						| Expression "'s mention" -- exprFirst

	MessageAuthorExpression = Noun<"author"> "of" Expression -- exprLast
							| Expression "'s author" -- exprFirst

	MessageContentExpression = Noun<"content"> "of" Expression -- exprLast
							| Expression "'s content" -- exprFirst
						
	NameExpression = Noun<"name"> "of" Expression -- exprLast
					| Expression "'s name" -- exprFirst

	UsernameExpression = Noun<"username"> "of" Expression -- exprLast
						| Expression "'s username" -- exprFirst

	RandomNumberExpression = A<"random"> "integer between" Expression "and" Expression "inclusive" -- inclusive
							| A<"random"> "integer between" Expression "and" Expression -- exclusive

	RoundExpression = Expression "rounded" -- round
					| "floor of" Expression -- downExprLast
					| Expression "rounded down" -- downExprFirst
					| "ceil of" Expression -- upExprLast
					| Expression "rounded up" -- upExprFirst

	GuildIconExpression = Noun<"icon"> "of" Expression -- exprLast
						| Expression "'s icon" -- exprFirst

	GuildRegionExpression = Noun<"region"> "of" Expression -- exprLast
							| Expression "'s region" -- exprFirst

	GuildOwnerExpression = Noun<"owner"> "of" Expression -- exprLast
							| Expression "'s owner" -- exprFirst

	SubstringExpression = Noun<("part" | "substring")> "of" Expression ("between" | "from") Expression "to" Expression -- indicies
						| Noun<"first"> Expression "characters of" Expression -- first
						| Noun<"last"> Expression "characters of" Expression -- last

	LengthExpression = Noun<"length"> "of" Expression -- exprLast
					| Expression "'s length" -- exprFirst

	LowercaseExpression = "lowercase of" Expression

	UppercaseExpression = "uppercase of" Expression

	UserAvatarExpression = Noun<"avatar"> "of" Expression -- exprLast
						| Expression "'s avatar" -- exprFirst

	UserDiscriminatorExpression = Noun<"discriminator"> "of" Expression -- exprLast
								| Expression "'s discriminator" -- exprFirst

	UserTagExpression = Noun<"tag"> "of" Expression -- exprLast
						| Expression "'s tag" -- exprFirst

	UserFromIDExpression = Noun<"user"> ("from" | "with" | "of") Noun<"id"> Expression

	MemberFromUserExpression = Noun<"member"> ("from" | "of") Expression

	MemberFromIDExpression = Noun<"member"> ("from" | "with" | "of") Noun<"id"> Expression

	ChannelFromIDExpression = Noun<"channel"> ("from" | "with" | "of") Noun<"id"> Expression

	RoleFromIDExpression = Noun<"role"> ("from" | "with" | "of") Noun<"id"> Expression

	RoleFromNameExpression = Noun<"role"> ("from" | "with" | "of") Noun<"name"> Expression

	ChannelFromMessageExpression = Noun<"channel"> ("from" | "of") Noun<"message"> Expression

	GuildFromRoleExpression = Noun<("guild" | "server")> ("from" | "of") Noun<"role"> Expression

	GuildFromMessageExpression = Noun<("guild" | "server")> ("from" | "of") Noun<"message"> Expression

	GuildFromChannelExpression = Noun<("guild" | "server")> ("from" | "of") Noun<"channel"> Expression

	ContainsExpression = Expression ("contains" | "includes") Expression

	DoesntContainExpression = Expression ("doesn't" | "doesnt" | "does not") ("contain" | "include") Expression

	HasPermissionExpression = Expression "has" Noun<"permissson"> "to"? Expression

	HasChannelPermissionExpression = Expression "has" Noun<"permissson"> "to"? Expression "in" Expression

	HasRoleExpression = Expression "has" Noun<"role"> Expression

	IsBotExpression = Expression "is" A<"bot">

	IsHoistedExpression = Expression ("is hoisted" | "displays seperately")

	OrExpression = OrExpression ("||" | "or") AndExpression -- or
				| AndExpression

	AndExpression = AndExpression ("&&" | "and") ExistenceExpression -- and
					| ExistenceExpression

	ExistenceExpression = EqualityExpression ("exists" | "is set") -- exists
						| EqualityExpression (("isn't" | "isnt" | "is not") "set" | ("does not" | "doesn't" | "doesnt") "exist") -- doesntExist
						| EqualityExpression

	EqualityExpression = RelationalExpression ArityToOne< ("==" | "===" | "equals" | "is" "equal to"?)> RelationalExpression -- equal
						| RelationalExpression ArityToOne<("!=" | "!==" | ("isn't" | "isnt" | "is not") "equal to"? | ("does not" | "doesn't" | "doesnt") "equal")> RelationalExpression -- notEqual
						| RelationalExpression

	RelationalExpression = AdditiveExpression ArityToOne<("<" | "is"? ("less" | "lower" | "smaller") "than")> AdditiveExpression -- lt
						| AdditiveExpression ArityToOne<(">" | "is"? ("greater" | "more" | "higher" | "bigger" | "larger") "than")> AdditiveExpression -- gt
						| AdditiveExpression ArityToOne<("<=" | "is"? ("less" | "lower" | "smaller") "than or" ("equal to" | "equals"))> AdditiveExpression -- le
						| AdditiveExpression ArityToOne<(">=" | "is"? ("greater" | "more" | "higher" | "bigger" | "larger") "than or" ("equal to" | "equals"))> AdditiveExpression -- ge
						| AdditiveExpression

	AdditiveExpression = AdditiveExpression "+" MultiplicativeExpression -- add
						| AdditiveExpression "-" MultiplicativeExpression -- sub
						| MultiplicativeExpression

	MultiplicativeExpression = MultiplicativeExpression "*" Expression -- mul
								| MultiplicativeExpression "^" Expression -- exp
								| MultiplicativeExpression "/" Expression -- div
								| MultiplicativeExpression "%" Expression -- mod
								| UnaryExpression

	UnaryExpression = "!" UnaryExpression -- not
					| PrimaryExpression

	PrimaryExpression = literal
						| "(" Expression ")" -- precedence

	literal = stringLiteral
			| numericLiteral
			| booleanLiteral
			| permissionLiteral
			| variableLiteral

	stringLiteral = "\"" doubleStringCharacter* "\""
				| "'" singleStringCharacter* "'"
	doubleStringCharacter = ~("\"" | "\\") any -- nonEscaped
							| "\\" escapeSequence -- escaped
	singleStringCharacter = ~("'" | "\\") any -- nonEscaped
							| "\\" escapeSequence -- escaped
	escapeSequence = singleEscapeCharacter | nonEscapeCharacter
	singleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
	nonEscapeCharacter = ~(singleEscapeCharacter | digit | "x" | "u" | lineTerminator) any

	numericLiteral = floatLiteral | integerLiteral | loopIndexLiteral

	loopIndexLiteral = "loop" "-"? "index"

	floatLiteral = "-" float -- negative
				| float -- positive

	integerLiteral = "-" integer -- negative
				| integer -- positive

	integer = digit+
	float = digit* "." digit+

	booleanLiteral = "true" | "false"

	permissionLiteral = createInvite
						| kickMembers
						| banMembers
						| administrator
						| manageChannels
						| manageGuild
						| addReactions
						| viewAuditLogs
						| readMessages
						| sendMessages
						| sendTTSMessages
						| manageMessages
						| embedLinks
						| attachFiles
						| readMessageHistory
						| mentionEveryone
						| externalEmojis
						| voiceConnect
						| voiceSpeak
						| voiceMuteMembers
						| voiceDeafenMembers
						| voiceMoveMembers
						| voiceUseVAD
						| changeNickname
						| manageNicknames
						| manageRoles
						| manageWebhooks
						| manageEmojis

	createInvite = "create a invite" | "create an invite" | "create invites"
	kickMembers = "kick members"
	banMembers = "ban members"
	administrator = "admin" | "administrator"
	manageChannels = "manage channels"
	manageGuild = "manage guild"
	addReactions = "add reactions"
	viewAuditLogs = "view logs" | "view audit logs"
	readMessages = "read messages" | "read"
	sendMessages = "send messages" | "send"
	sendTTSMessages = "send tts messages" | "send tts" | "send text to speech" | "send text to speech messages"
	manageMessages = "manage messages" | "delete messages"
	embedLinks = "send links" | "embed links"
	attachFiles = "send files" | "attach files"
	readMessageHistory = "read message history" | "read history"
	mentionEveryone = "mention everyone" | "use everyone"
	externalEmojis = "external emojis" | "use external emojis" | "external emotes" | "use external emotes"
	voiceConnect = "voice connect" | "connect to voice" | "connect"
	voiceSpeak = "voice speak" | "speak in voice" | "speak"
	voiceMuteMembers = "voice mute members" | "mute members"
	voiceDeafenMembers = "voice deafen members" | "deafen members"
	voiceMoveMembers = "move members" | "voice move members"
	voiceUseVAD = "voice"? "use"? caseInsensitive<"vad">
	changeNickname = "change nickname"
	manageNicknames = "manage nicknames"
	manageRoles = "manage roles"
	manageWebhooks = "manage webhooks"
	manageEmojis = "manage emojis"

	eventVariableIdentifier = "guild" -- guild
					| "member" -- member
					| "message" -- message
					| "arguments" -- arguments
	eventVariableLiteral = "event" "-"? eventVariableIdentifier

	variableLiteral = (noun<"value of">)? variableName
	variableName = "{" alnum+ "}"
}