OxylScript {
	Program = SourceElement*
	SourceElement = Statement #semicolon

	space := whitespace | lineTerminator | comment
	whitespace = "\t"
				| "\x0B" -- verticalTab
				| "\x0C" -- formFeed
				| " "
				| "\u00A0" -- noBreakSpace
				| "\uFEFF"  -- byteOrderMark
				| "\u2000".."\u200B"
				| "\u3000"

	lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
	lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"

	multiLineCommentSingleLine = "/*" (~("*/" | lineTerminator) any)* "*/"

	spacesNoNewline = (whitespace | singleLineComment | multiLineCommentSingleLine)*
	semicolon = space* (";" | end)
				| spacesNoNewline (lineTerminator | ~multiLineCommentSingleLine multiLineComment | &"}")

	comment = multiLineComment | singleLineComment
	multiLineComment = "/*" (~"*/" any)* "*/"
  	singleLineComment = "//" (~lineTerminator any)*

	noun<text> = ("the" space)? text
	Noun<text> = #noun<text>

	a<text> = (("an" | "a") space)? text
	A<text> = #a<text>

	ArityToOne<stuff> = stuff // convert the arity of something to one

	Statement = BlockStatement
				| EmptyStatement
				| VariableStatement
				| IfStatement
				| LoopStatement
				| AddRoleStatement
				| RemoveRoleStatement
				| BanStatement
				| KickStatement
				| CreateMessageStatement
				| SendDMStatement
				| SetNicknameStatement
				| ExpressionStatement

	BlockStatement = ~variableLiteral "{" Statement* "}"

	EmptyStatement = ";"

	VariableStatement = variableName "=" Expression -- setWithEqual
						| "set" Noun<"variable">? variableName "to" Expression -- setNoEqual

	IfStatement = "if" BooleanExpression Statement ("else" Statement)?

	LoopStatement = "loop" IntegerExpression "times" Statement

	AddRoleStatement = "add" RoleExpression "to" MemberExpression ArityToOne<("because" | "due to" | "with"? "reason")> StringExpression -- reason
					| "add" RoleExpression "to" MemberExpression -- noReason

	RemoveRoleStatement = "remove" RoleExpression "from" MemberExpression ArityToOne<("because" | "due to" | "with"? "reason")> StringExpression -- reason
						| "remove" RoleExpression "from" MemberExpression -- noReason

	BanStatement = "ban" MemberExpression ArityToOne<("because" | "due to" | "with"? "reason")> StringExpression -- reason
				| "ban" MemberExpression -- noReason

	KickStatement = "kick" MemberExpression ArityToOne<("because" | "due to" | "with"? "reason")> StringExpression -- reason
					| "kick" MemberExpression -- noReason

	CreateMessageStatement = ("create" | "send") (A<"message"> ("with content" | "saying")?)? StringExpression "in" ChannelExpression

	SendDMStatement = ("create" | "send") (A<("dm" | "direct message")> ("with content" | "saying")?)? StringExpression "to" UserExpression

	SetNicknameStatement = "set" Noun<"nickname"> "of" MemberExpression "to" StringExpression

	ExpressionStatement = Expression

	Expression = BooleanExpression
				| FloatExpression
				| IntegerExpression
				| NumberExpression
				| GuildExpression
				| ChannelExpression
				| MemberExpression
				| UserExpression
				| RoleExpression
				| MessageExpression
				| ArgumentsExpression
				| StringExpression

	BooleanExpression = IsHoistedExpression
						| IsBotExpression
						| HasRoleExpression
						| HasChannelPermissionExpression
						| HasPermissionExpression
						| DoesntContainExpression
						| ContainsExpression
						| OrExpression<Expression>
						| UnaryExpression
						| booleanLiteral
						| variableLiteral
						| PrecedenceExpression<BooleanExpression>

	IntegerExpressionNoAdditive = DifferenceExpression<IntegerExpression>
					| AbsoluteValueExpression<IntegerExpression>
					| LengthExpression
					| RoundExpression
					| RandomNumberExpression
					| MemberJoinTimestampExpression
					| MemberCountExpression
					| IndexOfExpression
					| CreationTimestampExpression
                    | loopIndexLiteral
					| integerLiteral
					| variableLiteral
					| PrecedenceExpression<IntegerExpressionNoAdditive>
                    
    IntegerExpression = AdditiveExpression<IntegerExpressionNoAdditive, IntegerExpressionNoAdditive>
    								| IntegerExpressionNoAdditive
    								| PrecedenceExpression<IntegerExpression>

	FloatExpressionNoAdditive = DifferenceExpression<FloatExpression>
					| AbsoluteValueExpression<FloatExpression>
					| floatLiteral
					| variableLiteral
					| PrecedenceExpression<FloatExpressionNoAdditive>
                    
   FloatExpression = AdditiveExpression<FloatExpressionNoAdditive, FloatExpressionNoAdditive>
   							| FloatExpressionNoAdditive
                            | PrecedenceExpression<FloatExpression>

	NumberExpression = FloatExpression
					| IntegerExpression
					| PrecedenceExpression<NumberExpression>

	GuildExpression = GuildFromRoleExpression
					| GuildFromMessageExpression
					| GuildFromChannelExpression
					| eventVariableLiteral_guild
					| variableLiteral
					| PrecedenceExpression<GuildExpression>

	ChannelExpression = ChannelFromMessageExpression
					| ChannelFromIDExpression
					| variableLiteral
					| PrecedenceExpression<ChannelExpression>

	MemberExpression = MemberFromIDExpression
					| MemberFromUserExpression
					| eventVariableLiteral_member
					| variableLiteral
					| PrecedenceExpression<MemberExpression>

	UserExpression = MessageAuthorExpression
					| UserFromIDExpression
					| GuildOwnerExpression
					| MemberExpression
					| variableLiteral
					| PrecedenceExpression<UserExpression>

	RoleExpression = RoleFromIDExpression
					| RoleFromNameExpression
					| variableLiteral
					| PrecedenceExpression<RoleExpression>

	MessageExpression = eventVariableLiteral_message
					| variableLiteral
					| PrecedenceExpression<MessageExpression>

	ArgumentsExpression = eventVariableLiteral_arguments
						| variableLiteral
						| PrecedenceExpression<ArgumentsExpression>

	PermissionExpression = permissionLiteral
						 | variableLiteral
						 | PrecedenceExpression<PermissionExpression>

	StringExpression = UserTagExpression
					| UserDiscriminatorExpression
					| UserAvatarExpression
					| LowercaseExpression
					| UppercaseExpression
					| SubstringExpression
					| GuildRegionExpression
					| GuildIconExpression
					| UsernameExpression
					| NameExpression
					| MessageContentExpression
					| MentionExpression
					| MemberStatusExpression
					| MemberGameExpression
					| IDExpression
					| FormatDateExpression
					| CleanContentExpression
					| stringLiteral
					| variableLiteral
					| PrecedenceExpression<StringExpression>
					| BooleanExpression
					| FloatExpression
					| IntegerExpression
					| NumberExpression
					| GuildExpression
					| ChannelExpression
					| MemberExpression
					| UserExpression
					| MessageExpression
					| PermissionExpression
					| RoleExpression
					| ArgumentsExpression

	GetArgumentExpression = #("arg" "ument"?) IntegerExpression "of" ArgumentsExpression

	AbsoluteValueExpression<expressionType> = (Noun<("absolute")> | Noun<"abs">) "value of" expressionType -- words
							| "|" expressionType "|" -- pipes

	CleanContentExpression = Noun<"clean"> "content of" MessageExpression -- exprLast
							| MessageExpression "'s clean content" -- exprFirst

	CreationTimestampExpression = Noun<"creation"> "timestamp of" (RoleExpression | MessageExpression | MemberExpression | UserExpression | ChannelExpression | GuildExpression) -- exprLast
								| (RoleExpression | MessageExpression | MemberExpression | UserExpression | ChannelExpression | GuildExpression) "'s creation timestamp" -- exprFirst

	DifferenceExpression<expressionType> = Noun<"difference"> "between" expressionType "and" expressionType

	FormatDateExpression = IntegerExpression ArityToOne<("formatted as a date" | "to date" "format"?)>

	IDExpression = Noun<"id"> "of" (RoleExpression | MessageExpression | MemberExpression | UserExpression | ChannelExpression | GuildExpression) -- exprLast
				| (RoleExpression | MessageExpression | MemberExpression | UserExpression | ChannelExpression | GuildExpression) "'s id" -- exprFirst

	IndexOfExpression = Noun<"index"> "of" StringExpression "in" StringExpression

	MemberCountExpression = Noun<"member"> "count of" GuildExpression -- exprLast
							| GuildExpression "'s member count" -- exprFirst

	MemberGameExpression = Noun<"game"> "of" MemberExpression -- exprLast
							| MemberExpression "'s game" -- exprFirst

	MemberJoinTimestampExpression = Noun<"join"> "timestamp of" MemberExpression -- exprLast
							| MemberExpression "'s join timestamp" -- exprFirst

	MemberStatusExpression = Noun<"status"> "of" MemberExpression -- exprLast
							| MemberExpression "'s status" -- exprFirst

	MentionExpression = Noun<"mention"> "of" (RoleExpression | MemberExpression | UserExpression | ChannelExpression) -- exprLast
						| (RoleExpression | MemberExpression | UserExpression | ChannelExpression) "'s mention" -- exprFirst

	MessageAuthorExpression = Noun<"author"> "of" MessageExpression -- exprLast
							| MessageExpression "'s author" -- exprFirst

	MessageContentExpression = Noun<"content"> "of" MessageExpression -- exprLast
							| MessageExpression "'s content" -- exprFirst
						
	NameExpression = Noun<"name"> "of" (RoleExpression | MemberExpression | UserExpression | ChannelExpression | GuildExpression) -- exprLast
					| (RoleExpression | MemberExpression | UserExpression | ChannelExpression | GuildExpression) "'s name" -- exprFirst

	UsernameExpression = Noun<"username"> "of" UserExpression -- exprLast
						| UserExpression "'s username" -- exprFirst

	RandomNumberExpression = A<"random"> "integer between" IntegerExpression "and" IntegerExpression "inclusive" -- inclusive
							| A<"random"> "integer between" IntegerExpression "and" IntegerExpression -- exclusive

	RoundExpression = NumberExpression "rounded" -- round
					| "floor of" NumberExpression -- downExprLast
					| NumberExpression "rounded down" -- downExprFirst
					| "ceil of" NumberExpression -- upExprLast
					| NumberExpression "rounded up" -- upExprFirst

	GuildIconExpression = Noun<"icon"> "of" GuildExpression -- exprLast
						| GuildExpression "'s icon" -- exprFirst

	GuildRegionExpression = Noun<"region"> "of" GuildExpression -- exprLast
							| GuildExpression "'s region" -- exprFirst

	GuildOwnerExpression = Noun<"owner"> "of" GuildExpression -- exprLast
							| GuildExpression "'s owner" -- exprFirst

	SubstringExpression = Noun<("part" | "substring")> "of" StringExpression ("between" | "from") IntegerExpression "to" IntegerExpression -- indicies
						| Noun<"first"> IntegerExpression "characters of" IntegerExpression -- first
						| Noun<"last"> IntegerExpression "characters of" IntegerExpression -- last

	LengthExpression = Noun<"length"> "of" StringExpression -- exprLast
					| StringExpression "'s length" -- exprFirst

	LowercaseExpression = "lowercase of" StringExpression

	UppercaseExpression = "uppercase of" StringExpression

	UserAvatarExpression = Noun<"avatar"> "of" UserExpression -- exprLast
						| UserExpression "'s avatar" -- exprFirst

	UserDiscriminatorExpression = Noun<"discriminator"> "of" UserExpression -- exprLast
								| UserExpression "'s discriminator" -- exprFirst

	UserTagExpression = Noun<"tag"> "of" UserExpression -- exprLast
						| UserExpression "'s tag" -- exprFirst

	UserFromIDExpression = Noun<"user"> ("from" | "with" | "of") Noun<"id"> StringExpression

	MemberFromUserExpression = Noun<"member"> ("from" | "of") UserExpression

	MemberFromIDExpression = Noun<"member"> ("from" | "with" | "of") Noun<"id"> StringExpression

	ChannelFromIDExpression = Noun<"channel"> ("from" | "with" | "of") Noun<"id"> StringExpression

	RoleFromIDExpression = Noun<"role"> ("from" | "with" | "of") Noun<"id"> StringExpression

	RoleFromNameExpression = Noun<"role"> ("from" | "with" | "of") Noun<"name"> StringExpression

	ChannelFromMessageExpression = Noun<"channel"> ("from" | "of") MessageExpression

	GuildFromRoleExpression = Noun<("guild" | "server")> ("from" | "of") RoleExpression

	GuildFromMessageExpression = Noun<("guild" | "server")> ("from" | "of") MessageExpression

	GuildFromChannelExpression = Noun<("guild" | "server")> ("from" | "of") ChannelExpression

	ContainsExpression = StringExpression ("contains" | "includes") StringExpression

	DoesntContainExpression = StringExpression ("doesn't" | "doesnt" | "does not") ("contain" | "include") StringExpression

	HasPermissionExpression = UserExpression "has" Noun<"permissson"> "to"? PermissionExpression

	HasChannelPermissionExpression = MemberExpression "has" Noun<"permissson"> "to"? PermissionExpression "in" ChannelExpression

	HasRoleExpression = MemberExpression "has" RoleExpression

	IsBotExpression = UserExpression "is" A<"bot">

	IsHoistedExpression = RoleExpression ("is hoisted" | "displays seperately")

	OrExpression<expression> = BooleanExpression ("||" | "or") AndExpression<expression>

	AndExpression<expression> = AndExpression<expression> ("&&" | "and") ExistenceExpression<expression>

	ExistenceExpression<expression> = EqualityExpression<expression> ("exists" | "is set") -- exists
						| EqualityExpression<expression> (("isn't" | "isnt" | "is not") "set" | ("does not" | "doesn't" | "doesnt") "exist") -- doesntExist

	EqualityExpression<expression> = RelationalExpression<expression> ArityToOne< ("==" | "===" | "equals" | "is" "equal to"?)> RelationalExpression<expression> -- equal
						| RelationalExpression<expression> ArityToOne<("!=" | "!==" | ("isn't" | "isnt" | "is not") "equal to"? | ("does not" | "doesn't" | "doesnt") "equal")> RelationalExpression<expression> -- notEqual

	RelationalExpression<expression> = (StringExpression | NumberExpression) ArityToOne<("<" | "is"? ("less" | "lower" | "smaller") "than")> (StringExpression | NumberExpression) -- lt
						| (StringExpression | NumberExpression) ArityToOne<(">" | "is"? ("greater" | "more" | "higher" | "bigger" | "larger") "than")> (StringExpression | NumberExpression) -- gt
						| (StringExpression | NumberExpression) ArityToOne<("<=" | "is"? ("less" | "lower" | "smaller") "than or" ("equal to" | "equals"))> (StringExpression | NumberExpression) -- le
						| (StringExpression | NumberExpression) ArityToOne<(">=" | "is"? ("greater" | "more" | "higher" | "bigger" | "larger") "than or" ("equal to" | "equals"))> (StringExpression | NumberExpression) -- ge
						| PrecedenceExpression<expression>
						| expression

	AdditiveExpression<leftExpressionType, rightExpressionType> = AdditiveExpression<leftExpressionType, rightExpressionType> "+" MultiplicativeExpression<leftExpressionType, rightExpressionType> -- add
						| AdditiveExpression<leftExpressionType, rightExpressionType> "-" MultiplicativeExpression<leftExpressionType, rightExpressionType> -- sub
						| MultiplicativeExpression<leftExpressionType, rightExpressionType>

	MultiplicativeExpression<leftExpressionType, rightExpressionType> = MultiplicativeExpression<leftExpressionType, rightExpressionType> "*" (leftExpressionType | rightExpressionType) -- mul
								| MultiplicativeExpression<leftExpressionType, rightExpressionType> "^" (leftExpressionType | rightExpressionType) -- exp
								| MultiplicativeExpression<leftExpressionType, rightExpressionType> "/" (leftExpressionType | rightExpressionType) -- div
								| MultiplicativeExpression<leftExpressionType, rightExpressionType> "%" (leftExpressionType | rightExpressionType) -- mod
								| leftExpressionType

	UnaryExpression = "!" BooleanExpression -- not

	PrecedenceExpression<type> = "(" type ")" -- precedence

	stringLiteral = "\"" doubleStringCharacter* "\""
				| "'" singleStringCharacter* "'"
	doubleStringCharacter = ~("\"" | "\\") any -- nonEscaped
							| "\\" escapeSequence -- escaped
	singleStringCharacter = ~("'" | "\\") any -- nonEscaped
							| "\\" escapeSequence -- escaped
	escapeSequence = singleEscapeCharacter | nonEscapeCharacter
	singleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
	nonEscapeCharacter = ~(singleEscapeCharacter | digit | "x" | "u" | lineTerminator) any

	numericLiteral = floatLiteral | integerLiteral | loopIndexLiteral

	loopIndexLiteral = "loop" "-"? "index"

	floatLiteral = "-" float -- negative
				| float -- positive

	integerLiteral = ~floatLiteral "-" integer -- negative
				| ~floatLiteral integer -- positive

	integer = digit+
	float = digit* "." digit+

	booleanLiteral = "true" | "false"

	permissionLiteral = createInvite
						| kickMembers
						| banMembers
						| administrator
						| manageChannels
						| manageGuild
						| addReactions
						| viewAuditLogs
						| readMessages
						| sendMessages
						| sendTTSMessages
						| manageMessages
						| embedLinks
						| attachFiles
						| readMessageHistory
						| mentionEveryone
						| externalEmojis
						| voiceConnect
						| voiceSpeak
						| voiceMuteMembers
						| voiceDeafenMembers
						| voiceMoveMembers
						| voiceUseVAD
						| changeNickname
						| manageNicknames
						| manageRoles
						| manageWebhooks
						| manageEmojis

	createInvite = "create a invite" | "create an invite" | "create invites"
	kickMembers = "kick members"
	banMembers = "ban members"
	administrator = "admin" | "administrator"
	manageChannels = "manage channels"
	manageGuild = "manage guild"
	addReactions = "add reactions"
	viewAuditLogs = "view logs" | "view audit logs"
	readMessages = "read messages" | "read"
	sendMessages = "send messages" | "send"
	sendTTSMessages = "send tts messages" | "send tts" | "send text to speech" | "send text to speech messages"
	manageMessages = "manage messages" | "delete messages"
	embedLinks = "send links" | "embed links"
	attachFiles = "send files" | "attach files"
	readMessageHistory = "read message history" | "read history"
	mentionEveryone = "mention everyone" | "use everyone"
	externalEmojis = "external emojis" | "use external emojis" | "external emotes" | "use external emotes"
	voiceConnect = "voice connect" | "connect to voice" | "connect"
	voiceSpeak = "voice speak" | "speak in voice" | "speak"
	voiceMuteMembers = "voice mute members" | "mute members"
	voiceDeafenMembers = "voice deafen members" | "deafen members"
	voiceMoveMembers = "move members" | "voice move members"
	voiceUseVAD = "voice"? "use"? caseInsensitive<"vad">
	changeNickname = "change nickname"
	manageNicknames = "manage nicknames"
	manageRoles = "manage roles"
	manageWebhooks = "manage webhooks"
	manageEmojis = "manage emojis"

	eventVariablePrefix = "event" "-"?
	eventVariableLiteral = eventVariablePrefix "guild" -- guild
						| eventVariablePrefix "member" -- member
						| eventVariablePrefix "message" -- message
						| eventVariablePrefix "arguments" -- arguments

	variableLiteral = (noun<"value of">)? variableName
	variableName = "{" alnum+ "}"
}